#include "FPSCounter.h"


FPSCounter::FPSCounter(unsigned int inSampleNum)
{
	//サンプル数の設定
	//平均を計算する個数
	mTimeDataCount = inSampleNum;
	//リスト初期化
	mTimeList.resize(mTimeDataCount, 0.0);
	mSumTimes = 0;
	//計測する時計の選択
	if (QueryPerformanceCounter(&mCounter) != 0)
	{
		//QueryPerformanceCounter関数を使うフラグ
		mCounterFlg = FPSCOUNTER_QUERYPER_COUNTER;
		//生成時の時刻（クロック数）を取得
		mBeforeClockCount = mCounter.QuadPart;        
		LARGE_INTEGER Freq;
		//1秒当たりクロック数を取得
		QueryPerformanceFrequency(&Freq);            
		mFreq = (double)Freq.QuadPart;
	}
	else
	{
		//timeGetTime関数を使うフラグ
		mCounterFlg = FPSCOUNTER_TIMEGETTIME;
		//精度を上げる
		timeBeginPeriod(1);
		//生成時の時刻（ミリ秒）を取得
		mBeforeMillSecond = timeGetTime();
	}
}


FPSCounter::~FPSCounter()
{
	//タイマーの精度を戻す
	if (mCounterFlg == FPSCOUNTER_TIMEGETTIME) timeEndPeriod(1);    
}

double FPSCounter::GetDefTime()
{
	//差分時間を計測
	//使える時計によって使う関数を切り替える
	if (mCounterFlg == FPSCOUNTER_QUERYPER_COUNTER)
	{
		//QueryPerformanceCounter関数による計測
		QueryPerformanceCounter(&mCounter);
		LONGLONG longDef = mCounter.QuadPart - mBeforeClockCount;
		mBeforeClockCount = mCounter.QuadPart;
		return (double)longDef * 1000 / mFreq;
	}
	else 
	{
		//timeGetTime関数による計測
		DWORD time = timeGetTime();
		DWORD defTime = time - mBeforeMillSecond;
		mBeforeMillSecond = time;
		return defTime;
	}
}

double FPSCounter::UpdateFPS(double inDef)
{
	//共通加算部分の更新
	mSumTimes += inDef - *mTimeList.begin();
	//最も古いデータを消去
	mTimeList.pop_front();
	//新しいデータを追加
	mTimeList.push_back(inDef);
	//FPS算出
	double fps = 0.0;
	double aveDef = mSumTimes / mTimeDataCount;
	if (aveDef != 0) fps = 1000.0 / aveDef;
	return fps;
}

